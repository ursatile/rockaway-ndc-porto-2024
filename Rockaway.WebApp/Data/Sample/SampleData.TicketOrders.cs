using System;
using System.Diagnostics;
using System.Diagnostics.Metrics;
using System.IO;
using System.Reflection.Metadata;
using System.Security.Policy;
using System.Text.RegularExpressions;
using Humanizer;
using NuGet.Protocol.Plugins;
using Rockaway.WebApp.Data.Entities;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace Rockaway.WebApp.Data.Sample;

public static partial class SampleData {

	public static List<(string Name, string Email)> Customers = [
		("Mick Jagger", "mick.jagger@example.com"),
		("Stevie Nicks", "stevie.nicks@example.com"),
		("Paul McCartney", "paul.mccartney@example.com"),
		("Debbie Harry", "debbie.harry@example.com"),
		("Freddie Mercury", "freddie.mercury@example.com"),
		("Joan Jett", "joan.jett@example.com"),
		("David Bowie", "david.bowie@example.com"),
		("Janis Joplin", "janis.joplin@example.com"),
		("Robert Plant", "robert.plant@example.com"),
		("Pat Benatar", "pat.benatar@example.com"),
		("John Lennon", "john.lennon@example.com"),
		("Chrissie Hynde", "chrissie.hynde@example.com"),
		("Jimmy Page", "jimmy.page@example.com"),
		("Courtney Love", "courtney.love@example.com"),
		("Bruce Springsteen", "bruce.springsteen@example.com"),
		("Grace Slick", "grace.slick@example.com"),
		("Jimi Hendrix", "jimi.hendrix@example.com"),
		("Kim Deal", "kim.deal@example.com"),
		("Kurt Cobain", "kurt.cobain@example.com"),
		("PJ Harvey", "pj.harvey@example.com"),
		("Keith Richards", "keith.richards@example.com"),
		("Annie Lennox", "annie.lennox@example.com"),
		("Eric Clapton", "eric.clapton@example.com"),
		("Florence Welch", "florence.welch@example.com"),
		("John Paul Jones", "john.p.jones@example.com"),
		("Karen O", "karen.o@example.com"),
		("Ringo Starr", "ringo.starr@example.com"),
		("Kim Gordon", "kim.gordon@example.com"),
		("Roger Daltrey", "roger.daltrey@example.com"),
		("Siouxsie Sioux", "siouxsie.sioux@example.com"),
		("Brian May", "brian.may@example.com"),
		("Alanis Morissette", "alanis.morissette@example.com"),
		("Roger Taylor", "roger.taylor@example.com"),
		("Shirley Manson", "shirley.manson@example.com"),
		("Billy Corgan", "billy.corgan@example.com"),
		("Liz Phair", "liz.phair@example.com"),
		("Eddie Vedder", "eddie.vedder@example.com"),
		("Lita Ford", "lita.ford@example.com"),
		("Chris Cornell", "chris.cornell@example.com"),
		("Melissa Etheridge", "melissa.etheridge@example.com"),
		("Axl Rose", "axl.rose@example.com"),
		("Nancy Wilson", "nancy.wilson@example.com"),
		("Slash", "slash@example.com"),
		("Ann Wilson", "ann.wilson@example.com"),
		("Ozzy Osbourne", "ozzy.osbourne@example.com"),
		("Sheryl Crow", "sheryl.crow@example.com"),
		("Gene Simmons", "gene.simmons@example.com"),
		("Hayley Williams", "hayley.williams@example.com"),
		("Iggy Pop", "iggy.pop@example.com"),
		("Chrissy Amphlett", "chrissy.amphlett@example.com"),
		("Lemmy Kilmister", "lemmy.kilmister@example.com"),
		("Dolores O'Riordan", "dolores.oriordan@example.com"),
		("Dave Grohl", "dave.grohl@example.com"),
		("Tori Amos", "tori.amos@example.com"),
		("Billy Joel", "billy.joel@example.com"),
		("Joan Baez", "joan.baez@example.com"),
		("Steven Tyler", "steven.tyler@example.com"),
		("Annie Clark (St. Vincent)", "annie.clark@example.com"),
		("Jon Bon Jovi", "jon.bonjovi@example.com"),
		("Patti Smith", "patti.smith@example.com"),
		("Joe Perry", "joe.perry@example.com"),
		("Courtney Barnett", "courtney.barnett@example.com"),
		("Dave Mustaine", "dave.mustaine@example.com"),
		("Kathleen Hanna", "kathleen.hanna@example.com"),
		("Lars Ulrich", "lars.ulrich@example.com"),
		("Kim Shattuck", "kim.shattuck@example.com"),
		("Tom Petty", "tom.petty@example.com"),
		("Grace VanderWaal", "grace.vanderwaal@example.com"),
		("Anthony Kiedis", "anthony.kiedis@example.com"),
		("Lzzy Hale", "lzzy.hale@example.com"),
		("Neil Young", "neil.young@example.com"),
		("Brody Dalle", "brody.dalle@example.com"),
		("Bono", "bono@example.com"),
		("Amy Lee", "amy.lee@example.com"),
		("Peter Gabriel", "peter.gabriel@example.com"),
		("Tina Turner", "tina.turner@example.com"),
		("Sting", "sting@example.com"),
		("Dolores Huerta", "dolores.huerta@example.com"),
		("Eddie Van Halen", "eddie.vanhalen@example.com"),
		("Fiona Apple", "fiona.apple@example.com"),
		("Jack White", "jack.white@example.com"),
		("Karen Carpenter", "karen.carpenter@example.com"),
		("Chris Martin", "chris.martin@example.com"),
		("Susanna Hoffs", "susanna.hoffs@example.com"),
		("Thom Yorke", "thom.yorke@example.com"),
		("Courtney Marie Andrews", "courtney.m.andrews@example.com"),
		("James Hetfield", "james.hetfield@example.com"),
		("Linda Perry", "linda.perry@example.com"),
		("Alex Turner", "alex.turner@example.com"),
		("Emmylou Harris", "emmylou.harris@example.com"),
		("Noel Gallagher", "noel.gallagher@example.com"),
		("Brittany Howard", "brittany.howard@example.com"),
		("Brian Johnson", "brian.johnson@example.com"),
		("Neko Case", "neko.case@example.com"),
		("Jeff Lynne", "jeff.lynne@example.com"),
		("Karen Elson", "karen.elson@example.com"),
		("Rod Stewart", "rod.stewart@example.com"),
		("PJ Harvey", "pj.harvey@example.com"),
		("Angus Young", "angus.young@example.com"),
		("Stevie Nicks", "stevie.nicks@example.com")
	];

	public static class TicketOrders {

		public static TicketOrder[] AllTicketOrders =
			Customers.Select((customer, index) => Shows.AllShows.Skip(index).First()
			.CreateTestOrder(customer.Name, customer.Email)).ToArray();

		public static IEnumerable<TicketOrderItem> AllTicketOrderItems
			=> AllTicketOrders.SelectMany(o => o.Contents);
	}

	public static TicketOrder CreateTestOrder(this Show show, string name, string email) {
		// To generate random-but-stable data, we use numbers based on
		// the modulo of various string properties.
		var quantities = show.TicketTypes.ToDictionary(tt => tt.Id, tt => 1 + tt.Name.Length % 5);
		var createdAt = show.Date.AtMidnight().InUtc().Minus(Duration.FromDays(42))
			.PlusHours(show.Venue.Name.Length)
			.PlusMinutes(show.HeadlineArtist.Name.Length)
			.PlusSeconds(show.Venue.Address.Length)
			.ToInstant();
		var o = show.CreateOrder(quantities, createdAt);
		o.CustomerEmail = email;
		o.CustomerName = name;
		o.CompletedAt = createdAt.Plus(Duration.FromMinutes(show.Venue.FullAddress.Length));
		o.Id = NextId;
		return o;
	}

	// We want real GUIDs, but we need them to be stable
	// otherwise we get noisy DB migrations, so we generate
	// a bunch of real GUIDs ahead of time and hardcode them.
	private static readonly string[] ticketOrderGuids = [
		"ac824d10-367f-494c-ad32-f221420c7c3c",
		"560ed55e-c635-4f0e-a433-a23ab6fa7bb6",
		"f584739d-2ec0-4de8-8de2-140333516b4f",
		"6d97121f-7e5b-4318-ac78-85c4b3ce920e",
		"c556bd74-2d2f-4dd5-b4e0-f88c95a41958",
		"0f7c7eab-a870-4654-8c07-36be6ac8866a",
		"1a1c46d8-5322-488f-910a-6a4e7a13704e",
		"0e617535-3aa6-4ef8-8705-82e941a5c2d8",
		"889a6277-8506-45e4-ac8c-f38db75ae886",
		"a4782161-4745-4b3f-92cc-ec8def894b4f",
		"b790f475-1781-4b6c-aaf5-00cc52d1f720",
		"742257aa-174c-490f-ae19-f9dd8cadf0f1",
		"015a0651-adca-4156-a4f1-7db85ee52920",
		"343b4199-b161-41a7-ad27-9e0a6786bf7e",
		"209b9419-29d2-4246-ad9a-350a94fc308f",
		"dde9b193-ee60-464e-a16d-a9dc3c4915ef",
		"d007ece8-9721-4ac5-b5f2-0b4c8cb14633",
		"0340290a-5b67-4c33-ae4b-fa007c77d6a6",
		"0fd7ce0d-74f2-44db-9796-e134c433170a",
		"e98e6206-f7d6-4aa9-9a81-1ce6b374904f",
		"ec743cea-6a67-43c4-b330-8dff12fbd1cd",
		"64a4cc01-89d2-4b2f-bd19-6d78fa5ad2a9",
		"8a67bd1b-aa53-46e6-bac6-a719256580b7",
		"571ca9f0-0e67-421f-87f4-1e108a2d5c84",
		"52e1659c-b46a-422b-99f9-c3b4ede9c160",
		"f4e30182-6d70-4282-bd7f-1a43760fc326",
		"b8cbf7f0-0378-4e67-880e-ca4711843cf9",
		"fbb57888-1bb2-4e5e-9a07-b69af08ade5a",
		"71a8ed05-079d-46f3-90ed-de962dbc2d30",
		"e87c2689-2e23-4947-89f8-45c86c74a06e",
		"31999597-75eb-4100-a84a-f229d64a7694",
		"8acbdd1d-dd30-4b11-83d7-9738086faec7",
		"b00afaba-d103-491c-8b70-9363f809879c",
		"89339c59-2550-470f-a10b-193c246163a7",
		"519a4e52-47c5-4919-bb19-47ba7ff2a058",
		"f39dff57-69b9-4d0b-9e69-05b6e2112e50",
		"03cdf083-ad2f-426c-82d3-de04e5662190",
		"3cc93ab0-811c-4e1e-8c04-8488525b195f",
		"00a54b58-da12-48aa-87f4-614f2bb56458",
		"082bc88b-b0be-4e8f-9f30-b456b307cac5",
		"2c570316-796b-4d26-b6ba-4cddc5432fd6",
		"90bb20b1-cdd4-466c-8a3b-cdba754c4881",
		"e6e6a3bc-eece-4902-8113-0aef74f11fe2",
		"caa47154-9175-446c-980e-33266fe92191",
		"f0d8e58a-81b2-4c61-9024-a494649fa344",
		"87c764ed-feb7-4e39-8b21-173d4d665980",
		"c145cbb6-6619-4f0e-be38-54c0d56f89a2",
		"a546d1ee-f0df-4653-b657-d8b5352ed1b2",
		"007dd09f-8d3a-44f9-8f1a-73a74909361b",
		"dde90a8a-2893-40a7-a71e-0c7e1ac9534d",
		"29cfc921-bcfb-4aef-823a-877efc1350f8",
		"b7840389-6c0b-4e76-a9ea-5ad02b05fa1b",
		"25939570-4dbf-4558-af9e-89d3b604888b",
		"e1db8e24-721b-47ea-9c75-a545ac0af349",
		"67611f38-da8b-4202-960f-8f715a0ac8c8",
		"af84ebde-7f0e-4b53-98a2-0dc09e19626a",
		"a039dee0-de1b-48d3-81d7-50870af0e9e6",
		"8d0abe2d-7996-48e3-9d47-032a42d2cd66",
		"50c09699-ff30-4c44-a750-d22aa2c05825",
		"2d1cfd15-5921-44c3-b45a-767bf359353a",
		"2d14d15b-7b34-4eeb-91bd-4b0a02615d0d",
		"afd3c9bc-e007-43bc-859c-d345d31257e7",
		"6b5e4934-38a9-4b1e-a138-9f5a332e8d6b",
		"9ad31dfb-d212-46ba-b4d2-47f6cee86558",
		"0a6a5613-341a-4df0-8c09-a48e6fb7190a",
		"c225957e-ffef-4ed1-9771-913f24748488",
		"8839e152-54b0-4a33-a87d-9b293eb5df06",
		"d10d2acb-c6a6-4420-87b3-b7f5f3a47607",
		"d7ef13eb-05f1-4ccb-b449-03227dfe1036",
		"41b1d9b2-2e12-4fed-b745-fb6aefa03e9b",
		"58d50c9b-3717-48f4-a6c6-c436cce710b9",
		"bfd5d16b-5b13-436a-a85a-8ac2407a7c4f",
		"b7ba3e33-751b-4299-882c-7244dd11ac5b",
		"8ef57084-107b-4807-b6ca-705e0f371a4e",
		"1931d1fb-d7be-427d-8960-3202b3fee109",
		"a17e04cf-8c04-4e9f-9810-e54684cd92e6",
		"27940e49-c710-46e0-833a-732b48deb204",
		"2f4562a8-8719-4c14-8005-c15c0b358646",
		"cab48f1b-2c44-4603-ad9a-6e4ebef29488",
		"b4737265-6df7-4187-aaa2-1414b134b833",
		"0162e53c-4fab-4491-ad99-ab289aa4f8ab",
		"6c8ceee9-ac3f-49d0-b0a7-4c3cea5a3fc4",
		"390f0a7a-a41a-4c09-bc7e-445a5f549f79",
		"48129e0a-aff0-4f3c-95e2-be067667202f",
		"620714c5-49e4-40c8-a305-0527d013f084",
		"3cfb7e9b-1604-41a7-8c9f-0d7178459238",
		"ef015e0b-0caa-40ce-a686-f0fa8f315d79",
		"aeab4623-5770-4823-a654-09e610942406",
		"a9c0f573-a157-45c4-a188-4cd9635d1656",
		"89dbf126-df95-4370-8959-822900f15e14",
		"9f741095-69d6-49b8-ba99-7f27d154a1a0",
		"f35b2892-2e20-418f-b91d-2718c0398b84",
		"5be62f9b-eb5b-44a6-b425-d301096d10be",
		"e6db76c5-b51f-4530-bc02-ca9a7f4c943c",
		"356eae4b-2cf5-4c7d-b875-05e8d9892889",
		"c060b846-e00a-4e4e-b30e-ac086bbd46e8",
		"a76b8d26-977d-4533-8951-5454ae82460d",
		"0fb248e5-256e-4333-a212-9deaf20e63b2",
		"a891bf80-06c6-4d3f-a8cd-1c4062c98967",
		"1d955669-34ec-49a9-b54d-e5f97be0a05c",
		"4f188deb-cf34-4fc1-b4e2-45fcf8ebae33",
		"cd1e9f9c-41b9-427a-8141-acb025c390b8",
		"1dc48386-87f4-46c9-817b-14a8fceaaa02",
		"43aec1aa-cb34-4f35-859f-c9d5add4abfa",
		"6498c175-3d7d-43ed-999e-fde4d0300045",
		"0b32ac01-7634-46e7-a302-c96dde962131",
		"4c24a704-12ee-4954-ba81-2f48d10804ad",
		"3baba902-e704-48a6-98e3-bfe36bd20c51",
		"60f87ef1-3292-4c76-bb25-9b7286ec0e73",
		"a2ec75d7-f827-43a1-a26c-e1cf13eaf0d3",
		"1e8a10c9-c350-4486-900f-c757037017bd",
		"54847dee-e61d-4d05-be4c-ec3ed86a9768",
		"c7fe669a-a12c-4871-861e-f39ec3779198",
		"c0bb0af8-06ce-484d-84e7-b4bb0b580af6",
		"d51f9182-069f-4840-aeec-4293a87b20be",
		"dda0433b-21c3-4e82-aa07-2814811dd376",
		"9ec26415-bb94-491e-bc1d-7d936cd63e3e",
		"dede81f2-f21f-45bb-b6f3-df24f3ef555c",
		"a06071f9-c7ad-4670-b458-78de7ca208e0",
		"2de1b5c4-4b14-4b9c-bdca-dbe153f532a8",
		"705391ab-b83b-419b-8a60-1659d5cb37cb",
		"32a957c6-4059-4788-9e29-88f106ae0793",
		"d0788c14-41cd-4886-83fa-8651c013d069",
		"92171378-f865-4515-a190-eb5e064208a5",
		"0359ced4-a56d-4628-94db-71855f3a737d",
		"5ee9c29a-7f4f-4bd8-b7c8-fc454559e2f1",
		"085b71a0-6f77-45e2-b927-b1cdecbe8bf1",
		"6f77a5bf-27c9-4a02-9aa6-3d657df63747",
		"72eee576-f543-44f7-9adb-f1798fd83aa3",
		"da38e7c6-785d-4d63-a97a-c880beac006a",
		"caa1e452-6609-4d41-94ff-d3f9bab128de",
		"a40b06bf-1a2f-43de-90f9-15a60f78d609",
		"10340f6e-e4c5-4f56-9ea8-e5ab7d30ddc5",
		"587c6b3c-6072-467d-96f4-07f91d96f5b8",
		"027fd7f5-261f-4b03-92da-f3aa6ab1f85b",
		"707f5902-e298-4467-b02e-1a0cbb005986",
		"abdcfa8c-a19e-4164-b3ad-87f5b7f0197a",
		"6eaabac1-4aea-4d59-82ff-ca8b9546c305",
		"da5587e2-aa18-4f6d-83da-3ba7a91252ee",
		"8f61b773-09c6-45f4-9cd9-dd16be79ea3f"
	];
	private static int index;
	private static Guid NextId => Guid.Parse(ticketOrderGuids[index++]);
}